/*
 * Main Application Class.It uses Singleton Design Pattern
 */

/*
 * MainApp.java
 *
 * Created on Feb 15, 2012, 11:25:34 AM
 */
package com.rentquest;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.security.MessageDigest;
import java.sql.Date;
import java.util.Locale;
import javax.swing.*;
import org.jdesktop.swingx.JXDatePicker;
import org.jdesktop.swingx.JXSearchField;
import org.jdesktop.swingx.border.DropShadowBorder;

/**
 *
 * @author drenpro
 */
public final class MainApp extends javax.swing.JFrame {
       
    
    public static final MainApp mainApp= new MainApp();
    
    public static MainApp getMainAppInstance()
    {
        return mainApp;
    }
    
    /*
     * Private Constructor Creates new form MainApp 
     */
    public MainApp() {
        /*
         * Set Nimbus Look and Feel
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        initComponents();
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        homeButton = new javax.swing.JButton();
        copyRightLabel = new javax.swing.JLabel();
        sidePaneTabbedPane = new javax.swing.JTabbedPane();
        actionScrollPane = new javax.swing.JScrollPane();
        actionPanel = new javax.swing.JPanel();
        tenantsActionLabel = new javax.swing.JLabel();
        createNewTenantButton = new javax.swing.JButton();
        deleteTenantButton = new javax.swing.JButton();
        payRentButton = new javax.swing.JButton();
        billATenantButton = new javax.swing.JButton();
        issueVacationNoticeButton = new javax.swing.JButton();
        viewTenantsDetailsButton = new javax.swing.JButton();
        editTenantButton = new javax.swing.JButton();
        landLordActionLabel = new javax.swing.JLabel();
        viewLandLordDetailsButton = new javax.swing.JButton();
        editLandLordDetailsButton = new javax.swing.JButton();
        deleteLandLordButton = new javax.swing.JButton();
        createNewLandLordButton = new javax.swing.JButton();
        plotActionLabel = new javax.swing.JLabel();
        editPlotDetailsButton = new javax.swing.JButton();
        viewPlotDetailButton = new javax.swing.JButton();
        deletePlotButton = new javax.swing.JButton();
        cretaNewPlotButton = new javax.swing.JButton();
        roomActionLabel = new javax.swing.JLabel();
        editRoomDetailsButton = new javax.swing.JButton();
        createNewRoomButton = new javax.swing.JButton();
        deletRoomButton = new javax.swing.JButton();
        viewRoomDetailsButton = new javax.swing.JButton();
        userActionsLabel = new javax.swing.JLabel();
        createNewUserButton = new javax.swing.JButton();
        editUserDetailsButton = new javax.swing.JButton();
        deleteUserButton = new javax.swing.JButton();
        viewUserDetailsButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JLabel();
        configureSettingsButton = new javax.swing.JButton();
        editSettingsButton = new javax.swing.JButton();
        viewSettingsButton = new javax.swing.JButton();
        managementScrollPane = new javax.swing.JScrollPane();
        managementPanel = new javax.swing.JPanel();
        genManagementLabel = new javax.swing.JLabel();
        searchAllButton = new javax.swing.JButton();
        deleteAllButton = new javax.swing.JButton();
        landLordReportButton = new javax.swing.JButton();
        userReportButton = new javax.swing.JButton();
        plotsReportButton = new javax.swing.JButton();
        roomReportButton = new javax.swing.JButton();
        tenantManagementLabel = new javax.swing.JLabel();
        tenantsTotalRentButton = new javax.swing.JButton();
        overdueRentButton = new javax.swing.JButton();
        vacateRoomButton = new javax.swing.JButton();
        tenantsReportButton = new javax.swing.JButton();
        getAllBillsButton = new javax.swing.JButton();
        removeVacationNoticeButton = new javax.swing.JButton();
        accountManagementLabel = new javax.swing.JLabel();
        getplotsExpensesButton = new javax.swing.JButton();
        profitLossButton = new javax.swing.JButton();
        viewRentPayementButton = new javax.swing.JButton();
        paylBillButton = new javax.swing.JButton();
        addAPlotExpenseButton = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        contLabel = new javax.swing.JLabel();
        mainIconLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        quitMenu = new javax.swing.JMenu();
        logoutMenuItem = new javax.swing.JMenuItem();
        shutdownMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RentQuest");
        setName("mainJFrame"); // NOI18N

        mainPanel.setBackground(new java.awt.Color(144, 89, 33));
        mainPanel.setBorder(new javax.swing.border.MatteBorder(null));
        mainPanel.setPreferredSize(new java.awt.Dimension(1249, 710));

        toolBar.setBackground(new java.awt.Color(144, 89, 33));
        toolBar.setRollover(true);

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rentquest/Resources/home.png"))); // NOI18N
        homeButton.setToolTipText("Go to Home Screen");
        homeButton.setFocusable(false);
        homeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        homeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        toolBar.add(homeButton);

        copyRightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        copyRightLabel.setText("Â©Fusion Systems, 2012.");
        copyRightLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        sidePaneTabbedPane.setBackground(new java.awt.Color(144, 89, 33));

        actionPanel.setBackground(new java.awt.Color(144, 89, 33));

        tenantsActionLabel.setForeground(new java.awt.Color(250, 243, 243));
        tenantsActionLabel.setText("Tenant Actions");

        createNewTenantButton.setText("Create new Tenant");
        createNewTenantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewTenantButtonActionPerformed(evt);
            }
        });

        deleteTenantButton.setText("Delete a Tenant");
        deleteTenantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTenantButtonActionPerformed(evt);
            }
        });

        payRentButton.setText("PayRent");
        payRentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payRentButtonActionPerformed(evt);
            }
        });

        billATenantButton.setText("Bill a Tenant");
        billATenantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billATenantButtonActionPerformed(evt);
            }
        });

        issueVacationNoticeButton.setText("  Issue a Vacation Notice");
        issueVacationNoticeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueVacationNoticeButtonActionPerformed(evt);
            }
        });

        viewTenantsDetailsButton.setText("View All Tenants ");
        viewTenantsDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTenantsDetailsButtonActionPerformed(evt);
            }
        });

        editTenantButton.setText("Edit Tenant Details");
        editTenantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTenantButtonActionPerformed(evt);
            }
        });

        landLordActionLabel.setForeground(new java.awt.Color(250, 243, 243));
        landLordActionLabel.setText("LandLord Actions");

        viewLandLordDetailsButton.setText("View All LandLords");
        viewLandLordDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLandLordDetailsButtonActionPerformed(evt);
            }
        });

        editLandLordDetailsButton.setText("Edit LandLord Details");
        editLandLordDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLandLordDetailsButtonActionPerformed(evt);
            }
        });

        deleteLandLordButton.setText("Delete LandLord");
        deleteLandLordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLandLordButtonActionPerformed(evt);
            }
        });

        createNewLandLordButton.setText("Create new LandLord");
        createNewLandLordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewLandLordButtonActionPerformed(evt);
            }
        });

        plotActionLabel.setForeground(new java.awt.Color(250, 243, 243));
        plotActionLabel.setText("Plot Actions");

        editPlotDetailsButton.setText("Edit Plot Details");
        editPlotDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPlotDetailsButtonActionPerformed(evt);
            }
        });

        viewPlotDetailButton.setText("View All Plots");
        viewPlotDetailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPlotDetailButtonActionPerformed(evt);
            }
        });

        deletePlotButton.setText("Delete a plot");
        deletePlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlotButtonActionPerformed(evt);
            }
        });

        cretaNewPlotButton.setText("Create a New Plot");
        cretaNewPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cretaNewPlotButtonActionPerformed(evt);
            }
        });

        roomActionLabel.setForeground(new java.awt.Color(250, 243, 243));
        roomActionLabel.setText("Room Actions");

        editRoomDetailsButton.setText("Edit Room Details");
        editRoomDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoomDetailsButtonActionPerformed(evt);
            }
        });

        createNewRoomButton.setText("Create a New Room");
        createNewRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewRoomButtonActionPerformed(evt);
            }
        });

        deletRoomButton.setText("Delete a Room");
        deletRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletRoomButtonActionPerformed(evt);
            }
        });

        viewRoomDetailsButton.setText("View All Rooms");
        viewRoomDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRoomDetailsButtonActionPerformed(evt);
            }
        });

        userActionsLabel.setForeground(new java.awt.Color(250, 243, 243));
        userActionsLabel.setText("User Actions");

        createNewUserButton.setText("Create New User");
        createNewUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewUserButtonActionPerformed(evt);
            }
        });

        editUserDetailsButton.setText("Edit User Details");
        editUserDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUserDetailsButtonActionPerformed(evt);
            }
        });

        deleteUserButton.setText("Delete a user");
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        viewUserDetailsButton.setText("View All Users");
        viewUserDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewUserDetailsButtonActionPerformed(evt);
            }
        });

        settingsButton.setForeground(new java.awt.Color(250, 243, 243));
        settingsButton.setText("Settings");

        configureSettingsButton.setText("Configure Settings");
        configureSettingsButton.setToolTipText("Configure a Plots Settings");
        configureSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configureSettingsButtonActionPerformed(evt);
            }
        });

        editSettingsButton.setText("Edit settings");
        editSettingsButton.setToolTipText("Edit Settings");
        editSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSettingsButtonActionPerformed(evt);
            }
        });

        viewSettingsButton.setText("View All Settings");
        viewSettingsButton.setToolTipText("View all settings");
        viewSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSettingsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tenantsActionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(issueVacationNoticeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(payRentButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(billATenantButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewTenantsDetailsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(createNewTenantButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(editTenantButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(createNewLandLordButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(deleteLandLordButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(editLandLordDetailsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(deleteTenantButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewLandLordDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(cretaNewPlotButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(deletePlotButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(viewPlotDetailButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(editPlotDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(viewRoomDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(deletRoomButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(createNewRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(editRoomDetailsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(deleteUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(createNewUserButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(viewUserDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(editUserDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(configureSettingsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(editSettingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(viewSettingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)))
                    .addComponent(landLordActionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plotActionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomActionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userActionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addComponent(tenantsActionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createNewTenantButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(deleteTenantButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(payRentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(billATenantButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(issueVacationNoticeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewTenantsDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editTenantButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(landLordActionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createNewLandLordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteLandLordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewLandLordDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editLandLordDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plotActionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cretaNewPlotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deletePlotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewPlotDetailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editPlotDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomActionLabel)
                .addGap(1, 1, 1)
                .addComponent(createNewRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deletRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewRoomDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editRoomDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userActionsLabel)
                .addGap(2, 2, 2)
                .addComponent(createNewUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(viewUserDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editUserDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsButton)
                .addGap(5, 5, 5)
                .addComponent(configureSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(230, Short.MAX_VALUE))
        );

        actionScrollPane.setViewportView(actionPanel);

        sidePaneTabbedPane.addTab("Actions", actionScrollPane);

        managementPanel.setBackground(new java.awt.Color(144, 89, 33));
        managementPanel.setForeground(new java.awt.Color(250, 243, 243));

        genManagementLabel.setForeground(new java.awt.Color(252, 245, 245));
        genManagementLabel.setText("General Management");

        searchAllButton.setText("Search Record(s)");
        searchAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAllButtonActionPerformed(evt);
            }
        });

        deleteAllButton.setText("Delete Record(s)");
        deleteAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllButtonActionPerformed(evt);
            }
        });

        landLordReportButton.setText("Get All Vacant Rooms");
        landLordReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllVacantRoomsButtonActionPerformed(evt);
            }
        });

        userReportButton.setText("Get All Booked Rooms");
        userReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllBookedRoomsButtonActionPerformed(evt);
            }
        });

        plotsReportButton.setText("Get All Occupied Rooms");
        plotsReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllOccupiedRoomsButtonActionPerformed(evt);
            }
        });

        roomReportButton.setText("Rooms To Be vacated");
        roomReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomsToBeVacatedButtonActionPerformed(evt);
            }
        });

        tenantManagementLabel.setForeground(new java.awt.Color(250, 243, 243));
        tenantManagementLabel.setText("Tenant Management");

        tenantsTotalRentButton.setText("Get Rent Due Tenants");
        tenantsTotalRentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentDueTenantsButtonActionPerformed(evt);
            }
        });

        overdueRentButton.setText("Get Overdue Tenants");
        overdueRentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overdueRentButtonActionPerformed(evt);
            }
        });

        vacateRoomButton.setText("Vacate A Room");
        vacateRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vacateRoomButtonActionPerformed(evt);
            }
        });

        tenantsReportButton.setText("Get Tenants Report");
        tenantsReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tenantsReportButtonActionPerformed(evt);
            }
        });

        getAllBillsButton.setText("Get All Bills");
        getAllBillsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllBillsButtonActionPerformed(evt);
            }
        });

        removeVacationNoticeButton.setText("Remove Vacation Notice");
        removeVacationNoticeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeVacationNoticeButtonActionPerformed(evt);
            }
        });

        accountManagementLabel.setForeground(new java.awt.Color(250, 243, 243));
        accountManagementLabel.setText("Accounts Management");

        getplotsExpensesButton.setText("Get Plot's Expenses");
        getplotsExpensesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotsExpensesButtonActionPerformed(evt);
            }
        });

        profitLossButton.setText("Plot's Profit/Loss Report");
        profitLossButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profitLossButtonActionPerformed(evt);
            }
        });

        viewRentPayementButton.setText("View Rent Payment");
        viewRentPayementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRentPayementButtonActionPerformed(evt);
            }
        });

        paylBillButton.setText("Pay Bill");
        paylBillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payBillButtonActionPerformed(evt);
            }
        });

        addAPlotExpenseButton.setText("Add A Plot Expense");
        addAPlotExpenseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAPlotExpenseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managementPanelLayout = new javax.swing.GroupLayout(managementPanel);
        managementPanel.setLayout(managementPanelLayout);
        managementPanelLayout.setHorizontalGroup(
            managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managementPanelLayout.createSequentialGroup()
                .addGroup(managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managementPanelLayout.createSequentialGroup()
                        .addGroup(managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genManagementLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tenantManagementLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(accountManagementLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managementPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(vacateRoomButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tenantsReportButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeVacationNoticeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                .addComponent(paylBillButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(getAllBillsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(overdueRentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tenantsTotalRentButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(profitLossButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewRentPayementButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managementPanelLayout.createSequentialGroup()
                        .addContainerGap(35, Short.MAX_VALUE)
                        .addGroup(managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(searchAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(landLordReportButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(userReportButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(plotsReportButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                .addComponent(roomReportButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(getplotsExpensesButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addAPlotExpenseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        managementPanelLayout.setVerticalGroup(
            managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managementPanelLayout.createSequentialGroup()
                .addComponent(genManagementLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(deleteAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(landLordReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plotsReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tenantManagementLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tenantsTotalRentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overdueRentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vacateRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tenantsReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getAllBillsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paylBillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeVacationNoticeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(accountManagementLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profitLossButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getplotsExpensesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewRentPayementButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAPlotExpenseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(479, Short.MAX_VALUE))
        );

        managementScrollPane.setViewportView(managementPanel);

        sidePaneTabbedPane.addTab("Rent Management", managementScrollPane);

        contentPanel.setBackground(new java.awt.Color(144, 89, 33));

        welcomeLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 36)); // NOI18N
        welcomeLabel.setText("Welcome,");

        contLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        contLabel.setText("Select An Option From Side Pane To Proceed.");

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(welcomeLabel)
            .addComponent(contLabel)
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(welcomeLabel)
                .addGap(98, 98, 98)
                .addComponent(contLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(149, Short.MAX_VALUE))
        );

        mainIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rentquest/Resources/mainIcon.png"))); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(copyRightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(sidePaneTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(mainIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(224, 224, 224)
                                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(756, 756, 756))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(mainIconLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sidePaneTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(copyRightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        quitMenu.setText("Quit ");

        logoutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rentquest/Resources/lockscreen.png"))); // NOI18N
        logoutMenuItem.setText("Lock Screen");
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        quitMenu.add(logoutMenuItem);

        shutdownMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rentquest/Resources/system-log-out.png"))); // NOI18N
        shutdownMenuItem.setText("Exit");
        shutdownMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownMenuItemActionPerformed(evt);
            }
        });
        quitMenu.add(shutdownMenuItem);

        menuBar.add(quitMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1192, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  
    private void createNewTenantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewTenantButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll();
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Create New Tenant");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(8, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel fname = new JLabel("First Name");
       JLabel lname = new JLabel("Last Name");
       JLabel natIdNo = new JLabel("National ID No");
       JLabel roomNo = new JLabel("Room No");
       JLabel plotNo = new JLabel("Plot No");
       JLabel telNo = new JLabel("Contact(Telephone No)");
       JLabel tenantId = new JLabel("Tenant ID");
       JLabel gender = new JLabel("Gender");
       
       //add labels to labelPanel
       labelPanel.add(fname);
       labelPanel.add(lname);
       labelPanel.add(natIdNo);
       labelPanel.add(roomNo);
       labelPanel.add(plotNo);
       labelPanel.add(telNo);
       labelPanel.add(tenantId);
       labelPanel.add(gender);
       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField fnameTextField = new JTextField();
       final JTextField lnameTextField = new JTextField();
       final JTextField natIdNonameTextField = new JTextField();
       final JTextField roomNoTextField = new JTextField();
       final JTextField plotNoTextField = new JTextField();
       final JTextField telNoTextField = new JTextField();
       final JTextField tenantIdTextField = new JTextField("AUTO_INCREMENT");
      tenantIdTextField.setEnabled(false);
       
       String genderArr [] = {"Male","Female"};
       final JComboBox genderCombo = new JComboBox(genderArr);
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(8, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(fnameTextField);
       fieldsPanel.add(lnameTextField);
       fieldsPanel.add(natIdNonameTextField);
       fieldsPanel.add(roomNoTextField);
       fieldsPanel.add(plotNoTextField);
       fieldsPanel.add(telNoTextField);
       fieldsPanel.add(tenantIdTextField);
       fieldsPanel.add(genderCombo);
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton saveButt = new JButton("Save");
       
       //add annonymous inner class to handle action event
       saveButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                   String fname = null;
                   String lname = null;
                   long natIdNo = 0;
                   String roomNo = null;
                   String gender = null;
                   String plotNo = null;
                   String telNo = null;
                   
                   try
                   {
                       fname = fnameTextField.getText();
                       lname = lnameTextField.getText();
                       natIdNo= Long.parseLong(natIdNonameTextField.getText());
                       roomNo = roomNoTextField.getText();
                       gender =  (String)genderCombo.getSelectedItem();
                       plotNo = plotNoTextField.getText();
                       telNo = telNoTextField.getText();
                   }
                   catch(Exception e)
                   {
                       JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                       return;
                   }
                   
                   
                   //check for blank strings
                   if(lname.equals("") || fname.equals("") || roomNo.equals("") || gender.equals("") || plotNo.equals("") || telNo.equals(""))
                   {
                       JOptionPane.showMessageDialog(contentPanel, "A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                       return;
                   }
                   
                   //Create a Runnable to execute in Swing Worker Thread
                   CreateNewTenant task = new CreateNewTenant(fname, lname, natIdNo, roomNo, gender, contentPanel,plotNo,telNo);
                   task.execute();
                   
            }//end of annonymous inner class
        });//end of call to addActionListener
       
       JButton cancelButt = new JButton("Cancel");
       
       //create annonymous class to handle cancel button event
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                fnameTextField.setText(null);
                lnameTextField.setText(null);
                natIdNonameTextField.setText(null);
                roomNoTextField.setText(null);
                plotNoTextField.setText(null);
                telNoTextField.setText(null);
              
            }
        });//end of cancel button action listener
       
       //add buttons to buttonPanel
       buttonPanel.add(saveButt);
       buttonPanel.add(cancelButt);
       
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
   
       contentPanel.revalidate();
       contentPanel.repaint();   
    }//GEN-LAST:event_createNewTenantButtonActionPerformed

    private void createNewLandLordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewLandLordButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Create New LandLord");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(7, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel fname = new JLabel("First Name");
       JLabel lname = new JLabel("Last Name");
       JLabel natIdNo = new JLabel("National ID No");
       JLabel noOfPlots = new JLabel("No of Plots");
       JLabel telNo = new JLabel("Telephone No");
       JLabel landLordId = new JLabel("LandLord ID");
       JLabel gender = new JLabel("Gender");
       
       //add labels to labelPanel
       labelPanel.add(fname);
       labelPanel.add(lname);
       labelPanel.add(natIdNo);
       labelPanel.add(noOfPlots);
       labelPanel.add(telNo);
       labelPanel.add(landLordId);
       labelPanel.add(gender);
       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField fnameTextField = new JTextField();
       final JTextField lnameTextField = new JTextField();
       final JTextField natIdNonameTextField = new JTextField();
       final JTextField noOfPlotsTextField = new JTextField("0");
       noOfPlotsTextField.setEnabled(false);
       
       final JTextField telNoTextField = new JTextField();
       
       final JTextField landLordIdTextField = new JTextField("AUTO_INCREMENT");
       landLordIdTextField.setEnabled(false);
       
       String genderArr [] = {"Male","Female"};
       final JComboBox genderCombo = new JComboBox(genderArr);
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(7, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(fnameTextField);
       fieldsPanel.add(lnameTextField);
       fieldsPanel.add(natIdNonameTextField);
       fieldsPanel.add(noOfPlotsTextField);
       fieldsPanel.add(telNoTextField);
       fieldsPanel.add(landLordIdTextField);
       fieldsPanel.add(genderCombo);
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton createLandLordButt = new JButton("Create LandLord");
       
       //create an annonymous inner class to handle Action Events
       createLandLordButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                //variable declaration
                String fname;
                String lname;
                long natIdNo;
                int noOfPlots;
                String telNo;
                String gender;
                
                //Input validation and conversion
                try
                {
                    fname = fnameTextField.getText();
                    lname = lnameTextField.getText();
                    natIdNo = Long.parseLong(natIdNonameTextField.getText());
                    noOfPlots = Integer.parseInt(noOfPlotsTextField.getText());
                    telNo = telNoTextField.getText();
                    gender = (String)genderCombo.getSelectedItem();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                    
                }
                
                    //check for Blank Strings
                    if(lname.equals("") || fname.equals("") || telNo.equals("") || gender.equals(""))
                    {
                       JOptionPane.showMessageDialog(contentPanel, "A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                       return;
                    }
                
                //Create CreateNewLandlord Runnable 
                CreateNewLandLord landLordTask = new CreateNewLandLord(fname, lname, natIdNo, noOfPlots, telNo, gender, contentPanel);
                landLordTask.execute();
    
            }//end of action performed method
        });//end of annonymous inner class
       
       
       JButton cancelButt = new JButton("Cancel");
       
       //create annonymous class to handle cancel button event
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                fnameTextField.setText(null);
                lnameTextField.setText(null);
                natIdNonameTextField.setText(null);
                telNoTextField.setText(null);
              
            }
        });//end of cancel button action listener
       
       //add buttons to buttonPanel
       buttonPanel.add(createLandLordButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
      
       contentPanel.revalidate();
       contentPanel.repaint();   
    }//GEN-LAST:event_createNewLandLordButtonActionPerformed

    private void cretaNewPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cretaNewPlotButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Create New Plot");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(5, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel plotname = new JLabel("Plot Name");
       JLabel plotNo = new JLabel("Plot No");
       JLabel noOfRooms = new JLabel("No Of Rooms");
       JLabel location = new JLabel("Location");
       JLabel landLordID = new JLabel("LandLordID");
       
       
       //add labels to labelPanel
       labelPanel.add(plotname);
       labelPanel.add(plotNo);
       labelPanel.add(noOfRooms);
       labelPanel.add(location);
       labelPanel.add(landLordID);
       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField plotnameTextField = new JTextField();
       final JTextField plotNoTextField = new JTextField();
       final JTextField noOfRoomsTextField = new JTextField();
       final JTextField locationTextField = new JTextField();
       final JTextField landLordIdTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(5, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotnameTextField);
       fieldsPanel.add(plotNoTextField);
       fieldsPanel.add(noOfRoomsTextField);
       fieldsPanel.add(locationTextField);
       fieldsPanel.add(landLordIdTextField);
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton createPlotButt = new JButton("Create Plot");
       
       //create annonymous inner class to handle action events
       createPlotButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                String plotName;
                String plotNo;
                int noOfRooms;
                String location;
                int landLordID;
                
                
                //Input validation code and conversion
                try
                {
                    plotName = plotnameTextField.getText();
                    plotNo = plotNoTextField.getText();
                    noOfRooms = Integer.parseInt(noOfRoomsTextField.getText());
                    location = locationTextField.getText();
                    landLordID = Integer.parseInt(landLordIdTextField.getText());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                    
                }
                
                //Check for Blank Strings
                if(plotName.equals("") || plotNo.equals("") || location.equals(""))
                {
                    JOptionPane.showMessageDialog(contentPanel, "A Field cannot be Blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                //create CreateNewPlot Runnable
                CreateNewPlot newPlotTask = new CreateNewPlot(plotName, plotNo, noOfRooms, location, landLordID, contentPanel);
                newPlotTask.execute();
                   
                   
            }//end of Action Event method
        });//end of annonymous inner class
               
               
       JButton cancelButt = new JButton("Cancel");
     
       //add annonymous inner class to handle cancel butt action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                plotnameTextField.setText(null);
                plotNoTextField.setText(null);
                noOfRoomsTextField.setText(null);
                locationTextField.setText(null);
                landLordIdTextField.setText(null);
            }
        });//end of annonymous inner class
       
       //add buttons to buttonPanel
       buttonPanel.add(createPlotButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);

       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_cretaNewPlotButtonActionPerformed

    private void createNewRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewRoomButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Create New Room");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(9, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel plotNo = new JLabel("Plot No");
       JLabel roomType = new JLabel("Room Type");
       JLabel roomStatus = new JLabel("Room status");
       JLabel rentPaymentType = new JLabel("Rent Payment Type");
       JLabel units = new JLabel("Units");
       JLabel unitCharge = new JLabel("Unit Charge");
       JLabel fixedCharge = new JLabel("Fixed Charge");
       JLabel monthlyRent = new JLabel("Monthly Rent");
       JLabel roomNo = new JLabel("Room No");
      
       
       //add labels to labelPanel
       labelPanel.add(plotNo);
       labelPanel.add(roomType);
       labelPanel.add(roomStatus);
       labelPanel.add(rentPaymentType);
       labelPanel.add(units);
       labelPanel.add(unitCharge);
       labelPanel.add(fixedCharge);
       labelPanel.add(monthlyRent);
       labelPanel.add(roomNo);

       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField plotNoTextField = new JTextField();
       
       //create Room type Array
       String roomTypeArr [] = {"BedSitter","Single Bedroom","Double BEdroom","3 Bedroom","4 Bedroom","Others"};
       final JComboBox roomTypeCombo = new JComboBox(roomTypeArr);
       final JTextField roomStatusTextField = new JTextField("Vacant");
       roomStatusTextField.setEnabled(false);
       
       final JTextField monthlyRentTextField = new JTextField("0");
       final JTextField roomNoTextField = new JTextField();
       
       String rentPayType [] = {"Normal","Per Square Unit"};
       final JComboBox rentPayTypeCombo = new JComboBox(rentPayType);
       final JTextField unitsTextfield =new JTextField("0");
       final JTextField unitChargeTextfield = new JTextField("0");
       final JTextField fixedChargeTextfield = new JTextField("0");
      
       
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(9, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotNoTextField);
       fieldsPanel.add(roomTypeCombo);
       fieldsPanel.add(roomStatusTextField);
       fieldsPanel.add(rentPayTypeCombo);
       fieldsPanel.add(unitsTextfield);
       fieldsPanel.add(unitChargeTextfield);
       fieldsPanel.add(fixedChargeTextfield);
       fieldsPanel.add(monthlyRentTextField);
       fieldsPanel.add(roomNoTextField);

       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //set defaults
       unitsTextfield.setEnabled(false);
       unitChargeTextfield.setEnabled(false);
       fixedChargeTextfield.setEnabled(false);
       
       
       //Add rentType Action Handler
       rentPayTypeCombo.addItemListener(
               new ItemListener() // anonymous inner class              
        {
            // handle JComboBox event                             
            @Override
            public void itemStateChanged( ItemEvent event )
            {
                 // determine whether checkbox selected
                 if ( event.getStateChange() == ItemEvent.SELECTED && rentPayTypeCombo.getSelectedItem().equals("Normal"))
                 {
                     unitsTextfield.setText("0");
                     unitsTextfield.setEnabled(false);
                     
                     unitChargeTextfield.setText("0");
                     unitChargeTextfield.setEnabled(false);
                     
                     fixedChargeTextfield.setText("0");
                     fixedChargeTextfield.setEnabled(false);
                     
                     monthlyRentTextField.setText("0");
                     monthlyRentTextField.setEnabled(true);
                 }
                 
                 if ( event.getStateChange() == ItemEvent.SELECTED && rentPayTypeCombo.getSelectedItem().equals("Per Square Unit"))
                 {
                     unitsTextfield.setText("0");
                     unitsTextfield.setEnabled(true);
                     
                     unitChargeTextfield.setText("0");
                     unitChargeTextfield.setEnabled(true);
                     
                     fixedChargeTextfield.setText("0");
                     fixedChargeTextfield.setEnabled(true);
                     
                     monthlyRentTextField.setText("0");
                     monthlyRentTextField.setEnabled(false);
                 }
                 
            } // end method itemStateChanged
        } // end anonymous inner class                           
        ); // end call to addItemListen
    
               
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton createRoomButt = new JButton("Create Room");
       
       //add annonymous inner class to handle action events
       createRoomButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                String roomType;
                String plotNo;
                String roomStatus;
                double monthlyRent;
                String roomNo;
                //more variables
                double units;
                double unitcharge;
                double fixedcharge;
                double totalCharge;
                
                //Input validation and conversion
                try
                {
                    roomType = (String)roomTypeCombo.getSelectedItem();
                    plotNo = plotNoTextField.getText();
                    roomStatus = roomStatusTextField.getText();
                    //finalize
                    units = Double.parseDouble(unitsTextfield.getText());
                    unitcharge = Double.parseDouble(unitChargeTextfield.getText());
                    fixedcharge = Double.parseDouble(fixedChargeTextfield.getText()); 
                    totalCharge = (units * unitcharge) + fixedcharge;
                    //end of finalize
                    monthlyRent = Double.parseDouble(monthlyRentTextField.getText()) + totalCharge;
                    roomNo = roomNoTextField.getText();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                    //Check for Blank strings
                    if(roomType.equals("") || plotNo.equals("") || roomStatus.equals("") || roomNo.equals(""))
                    {
                       JOptionPane.showMessageDialog(contentPanel, "A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                       return;
                    }
                
                
                //create Runnable to execute in SwingWorker Thread
                CreateNewRoom newRoomtask = new CreateNewRoom(roomType, plotNo, roomStatus, monthlyRent, roomNo, contentPanel);
                newRoomtask.execute();
                
            }//end of action performed method
        });//end of annonymous inner class
       
       
       JButton cancelButt = new JButton("Cancel");
       
       //crate annonymous inner class to handle cancel butt action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                plotNoTextField.setText(null);
                roomStatusTextField.setText("Vacant");
                roomNoTextField.setText(null);
                monthlyRentTextField.setText(null);
            }
        });//end of annonymous inner class
              
       //add buttons to buttonPanel
       buttonPanel.add(createRoomButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_createNewRoomButtonActionPerformed

    private void createNewUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewUserButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Create New User");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(6, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel fname = new JLabel("First Name");
       JLabel lname = new JLabel("Last Name");
       JLabel natIdNo = new JLabel("National ID No");
       JLabel username = new JLabel("Username");
       JLabel password = new JLabel("Password");
       JLabel confirmPassword = new JLabel("Confirm Password");
       
       //add labels to labelPanel
       labelPanel.add(fname);
       labelPanel.add(lname);
       labelPanel.add(natIdNo);
       labelPanel.add(username);
       labelPanel.add(password);
       labelPanel.add(confirmPassword);
       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField fnameTextField = new JTextField();
       final JTextField lnameTextField = new JTextField();
       final JTextField natIdNonameTextField = new JTextField();       
       final JTextField usernameTextField = new JTextField();
       final JPasswordField passwardJPasswordField = new JPasswordField();
       final JPasswordField confirmPasswordField = new JPasswordField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(6, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(fnameTextField);
       fieldsPanel.add(lnameTextField);
       fieldsPanel.add(natIdNonameTextField);
       fieldsPanel.add(usernameTextField);
       fieldsPanel.add(passwardJPasswordField);
       fieldsPanel.add(confirmPasswordField);
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton createUserButt = new JButton("Create User");
       
       //create annonymous inner class to handle action events       
       createUserButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                String username;
                byte password[];
                byte confirmPassword[];
                String fname;
                String lname;
                long natIdNo;
                              
                //input validation and conversion
                try
                {
                    username= usernameTextField.getText();
                    fname = fnameTextField.getText();
                    lname = lnameTextField.getText();
                    natIdNo = Long.parseLong(natIdNonameTextField.getText());
                    password = Utils.makePasswordDigest(usernameTextField.getText(),passwardJPasswordField.getPassword());
                    confirmPassword = Utils.makePasswordDigest(username, confirmPasswordField.getPassword());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                    if(MessageDigest.isEqual(password, confirmPassword))
                    {
                        //check for Blank Strings
                        if(username.equals("") || lname.equals("") || fname.equals(""))
                        {
                            JOptionPane.showMessageDialog(contentPanel, "A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    
                        //create runnable for execution in swing worker thread
                        CreateNewUser newUserTask = new CreateNewUser(fname, lname, natIdNo, password, username, contentPanel);
                        newUserTask.execute();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(contentPanel, "Passwords Do not Match!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    
                    //indicate that Access control might be added later
                    //JOptionPane.showMessageDialog(null, "Access control might be added later hence need for User Type field!", "More Features", JOptionPane.INFORMATION_MESSAGE);
                
            }//end of action performed method
        });//end of annonymous inner class
       
       JButton cancelButt = new JButton("Cancel");
       
       //Anonymous inner class to handle Cancel Button Action Events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae){ 
                    
                usernameTextField.setText(null);
                fnameTextField.setText(null);
                lnameTextField.setText(null);
                natIdNonameTextField.setText(null);
                passwardJPasswordField.setText(null);
                confirmPasswordField.setText(null);
                
            }//end of action performed method
        });//end of anonymous inner class
       
       //add buttons to buttonPanel
       buttonPanel.add(createUserButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);

       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_createNewUserButtonActionPerformed

    private void payRentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payRentButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Pay Rent");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(5, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel tenantID = new JLabel("TenantID");
       JLabel rentType = new JLabel("Rent Type");
       JLabel amount = new JLabel("Amount(KES)");
       JLabel date = new JLabel("Payment Date");
       JLabel payrentID = new JLabel("PayRentID");

       
       //add labels to labelPanel
       labelPanel.add(tenantID);
       labelPanel.add(rentType);
       labelPanel.add(amount);
       labelPanel.add(date);
       labelPanel.add(payrentID);
       
       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField tenantIDTextField = new JTextField();
       
       //create rent type Array
       String rentTypeArr []  = {"Monthly Rent","Security Deposit"};
       
       final JComboBox rentTypeCombo = new JComboBox(rentTypeArr);
       
       final JTextField amountTextField = new JTextField();
       final JXDatePicker paymentDate = new JXDatePicker(Locale.UK);
       
       final JTextField payRentIDTextField = new JTextField("AUTO_INCREMENT");
       payRentIDTextField.setEnabled(false);//
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(5, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(tenantIDTextField);
       fieldsPanel.add(rentTypeCombo);
       fieldsPanel.add(amountTextField);
       fieldsPanel.add(paymentDate);
       fieldsPanel.add(payRentIDTextField);
    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton payRentButt = new JButton("Pay Rent");
       
       //annonymous inner class to handle pay rent action event
       payRentButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                //variables
                double amount;
                Date dateOfPayment;
                int tenantID;
                java.util.Date currDate;
                String rentType = null;
                
                try
                {
                    amount = Double.parseDouble(amountTextField.getText());
                    dateOfPayment = new Date(paymentDate.getDate().getTime());
                    tenantID = Integer.parseInt(tenantIDTextField.getText());
                    rentType = (String)rentTypeCombo.getSelectedItem();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                    //Check for Blank Strings
                    if(rentType.equals(""))
                    {
                       JOptionPane.showMessageDialog(contentPanel, "A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                       return;
                    }
                
                //create a new Runnable to execute in Swing Worker Thread
                PayRent payRentTask = new PayRent(amount, dateOfPayment, tenantID, contentPanel,rentType);
                payRentTask.execute();
                
            }//end of actionPerformed method
        });
       
       JButton cancelButt = new JButton("Cancel");
       
       //add buttons to buttonPanel
       buttonPanel.add(payRentButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       

       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_payRentButtonActionPerformed

    private void billATenantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billATenantButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Bill A Tenant");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(9, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel tenantID = new JLabel("TenantID");
       JLabel fixedCharge = new JLabel("Fixed Charge(KES)");
       JLabel units = new JLabel("No Of Units");
       JLabel unitCharge = new JLabel("Unit Charge(KES)");
       JLabel utility = new JLabel("Utility");
       JLabel date = new JLabel("Date");
       JLabel billPaymentStatus = new JLabel("Bill Payment Status");
       JLabel billId = new JLabel("BillID");
       JLabel total = new JLabel("Total Bill(KES)");
       

       
       //add labels to labelPanel
       labelPanel.add(tenantID);
       labelPanel.add(fixedCharge);
       labelPanel.add(units);
       labelPanel.add(unitCharge);
       labelPanel.add(utility);
       labelPanel.add(date);
       labelPanel.add(billPaymentStatus);
       labelPanel.add(billId);
       labelPanel.add(total);
       
       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField tenantIDTextField = new JTextField();
       final JTextField fixedTextField = new JTextField("0");
       final JTextField unitsTextField = new JTextField("0");
       final JTextField unitChargeTextField = new JTextField("0");
       final JTextField billPaymentStatusTextField = new JTextField("Not_Payed");
       
       //create utility Array
       String utilityArr [] = {"Electricity Bill","Water Bill","Internet Connection","Garbage Collection","Others"};
       
       final JComboBox utilityJCombo = new JComboBox(utilityArr);
       
       final JXDatePicker billDate = new JXDatePicker(Locale.UK);
       
       final JTextField billIDTextField = new JTextField("AUTO_INCREMENT");
       billIDTextField.setEnabled(false);//
       
       final JTextField totalTextField = new JTextField("CALCULATED FIELD");
       totalTextField.setEditable(false);
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(9, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(tenantIDTextField);
       fieldsPanel.add(fixedTextField);
       fieldsPanel.add(unitsTextField);
       fieldsPanel.add(unitChargeTextField);
       fieldsPanel.add(utilityJCombo);
       fieldsPanel.add(billDate);
       fieldsPanel.add(billPaymentStatusTextField);
       fieldsPanel.add(billIDTextField);
       fieldsPanel.add(totalTextField);
    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton billTenantButt = new JButton("Bill A Tenant");
       
       //Annonymous inner class for handling Action Events
       billTenantButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variables
                int tenantID;
                double fixedCharge;
                double units;
                double unitCharge;
                String utility;
                Date date;
                double totalbill;
                String billPaymentStatus = null;
                
                //Input data conversion and validation
                try
                {
                    tenantID = Integer.parseInt(tenantIDTextField.getText());
                    fixedCharge = Double.parseDouble(fixedTextField.getText());
                    units = Double.parseDouble(unitsTextField.getText());
                    unitCharge = Double.parseDouble(unitChargeTextField.getText());
                    utility = (String)utilityJCombo.getSelectedItem();
                    date = new Date(billDate.getDate().getTime());
                    billPaymentStatus = billPaymentStatusTextField.getText();
                    totalbill = (units*unitCharge) + fixedCharge;
                    totalTextField.setText(""+totalbill);
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                    //Check for Blank Strings
                    if(utility.equals("") || billPaymentStatus.equals(""))
                    {
                       JOptionPane.showMessageDialog(contentPanel, "A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                       return;
                    }
                
                //create new Runnable to execute in Swing Worker Thread
                BillATenant billTask = new BillATenant(tenantID, fixedCharge, units, unitCharge, utility, date, totalbill, contentPanel,billPaymentStatus);
                billTask.execute();
                
            }//end of actionPerformed
        });//end of annonymous inner class
       
       JButton cancelButt = new JButton("Cancel");
       JButton printButt = new JButton("Print Bill");
       
       //add buttons to buttonPanel
       buttonPanel.add(billTenantButt);
       buttonPanel.add(cancelButt);
       buttonPanel.add(printButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);

       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_billATenantButtonActionPerformed

    private void issueVacationNoticeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueVacationNoticeButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Issue A Vacation Notice");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(3, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel tenantID = new JLabel("TenantID");
       JLabel plotNo = new JLabel("Plot No");
       JLabel expectedLeavingDate = new JLabel("Expected Leaving Date");       

       
       //add labels to labelPanel
       labelPanel.add(tenantID);
       labelPanel.add(plotNo);
       labelPanel.add(expectedLeavingDate);
       
       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField tenantIDTextField = new JTextField();
       final JTextField plotNoTextField = new JTextField();
       final JXDatePicker expectedLeavingDateChooser = new JXDatePicker(Locale.UK);

       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(3, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(tenantIDTextField);
       fieldsPanel.add(plotNoTextField);
       fieldsPanel.add(expectedLeavingDateChooser);
      
    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton issuevacationNoticeButt = new JButton("Issue Vacation Notice");
       
       //create an annonymous inner class to handle action events
       issuevacationNoticeButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variables
                String plotNo;
                Date expectedLeavingDate;
                int tenantID;
                
                //Input validation and conversion
                try
                {
                    plotNo = plotNoTextField.getText();
                    expectedLeavingDate = new Date(expectedLeavingDateChooser.getDate().getTime());
                    tenantID = Integer.parseInt(tenantIDTextField.getText());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                    
                }
                
                    //Check for Blank Strings
                    if(plotNo.equals(""))
                    {
                       JOptionPane.showMessageDialog(contentPanel, "A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                       return;
                    }
                
                //execute task in SwingWorker Thread
                IssueVacationNotice vacationNoticeTask = new IssueVacationNotice(plotNo, expectedLeavingDate, tenantID, contentPanel);
                vacationNoticeTask.execute();
                
            }
        });
               
               
       JButton cancelButt = new JButton("Cancel");
       JButton printButt = new JButton("Print");
       
       //add buttons to buttonPanel
       buttonPanel.add(issuevacationNoticeButt);
       buttonPanel.add(cancelButt);
       buttonPanel.add(printButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_issueVacationNoticeButtonActionPerformed

    //Delete Events
    private void deleteTenantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTenantButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Delete A Tenant");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel tenantID = new JLabel("Enter TenantID");
       
       //add labels to labelPanel
       labelPanel.add(tenantID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField tenantIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(tenantIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton deleteButt = new JButton("Delete Tenant");
       
       //create annonymous inner class to handle action events
       deleteButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                int recordId;
                
                //Input validation and conversion
                try
                {
                    recordId = Integer.parseInt(tenantIDTextField.getText());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                //create delete query
                String query ="DELETE FROM Tenants WHERE Tenant_ID ="+recordId;
                String testQuery  ="SELECT * FROM Tenants WHERE Tenant_ID ="+ recordId;
                
                //create Runnable for executind delete query
                DeleteRecord delTask = new DeleteRecord(query,testQuery, contentPanel);
                delTask.execute();
                
                
            }//end of action performed method
        });//end of annonymous inner class
       
       
       JButton cancelButt = new JButton("Cancel");
        //add annonymous inner class to handle action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                tenantIDTextField.setText(null);
            }
        });//end of annonymous inner class
       
       
       //add buttons to buttonPanel
       buttonPanel.add(deleteButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_deleteTenantButtonActionPerformed

    private void deleteLandLordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLandLordButtonActionPerformed
        // TODO add your handling code here:
        contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Delete A LandLord");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel landLordID = new JLabel("Enter LandLordID");
       
       //add labels to labelPanel
       labelPanel.add(landLordID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField landLordIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(landLordIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton deleteButt = new JButton("Delete LandLord");
       
       //create annonymous inner class to handle action events
       deleteButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                int recordId;
                
                //Input validation and conversion
                try
                {
                    recordId = Integer.parseInt(landLordIDTextField.getText());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                //create delete query
                String query ="DELETE FROM LandLords WHERE LandLord_ID ="+recordId;
                String testQuery  ="SELECT * FROM LandLords WHERE LandLord_ID ="+ recordId;
                
                //create Runnable for executind delete query
                DeleteRecord delTask = new DeleteRecord(query,testQuery, contentPanel);
                delTask.execute();
                
                
            }//end of action performed method
        });//end of annonymous inner class
       JButton cancelButt = new JButton("Cancel");
        //add annonymous inner class to handle action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                landLordIDTextField.setText(null);
            }
        });//end of annonymous inner class
       
       
       //add buttons to buttonPanel
       buttonPanel.add(deleteButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_deleteLandLordButtonActionPerformed

    private void deletePlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlotButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Delete A Plot");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel plotID = new JLabel("Enter plotID");
       
       //add labels to labelPanel
       labelPanel.add(plotID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField plotIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton deleteButt = new JButton("Delete Plot");
       
       //create annonymous inner class to handle action events
       deleteButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                String recordId;
                
                //Input validation and conversion
                try
                {
                    recordId = plotIDTextField.getText();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                    //check for Blank strings
                    if(recordId.equals(""))
                    {
                       JOptionPane.showMessageDialog(contentPanel, "A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                       return;
                    }
                
                //create delete query
                String query ="DELETE FROM Plots WHERE Plot_No ='"+recordId+"'";
                String testQuery  ="SELECT * FROM Plots WHERE Plot_No = '"+ recordId+"'";
                
                //create Runnable for executind delete query
                DeleteRecord delTask = new DeleteRecord(query,testQuery, contentPanel);
                delTask.execute();
                
                
            }//end of action performed method
        });//end of annonymous inner class
       JButton cancelButt = new JButton("Cancel");
        //add annonymous inner class to handle action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                plotIDTextField.setText(null);
            }
        });//end of annonymous inner class
       
       
       //add buttons to buttonPanel
       buttonPanel.add(deleteButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_deletePlotButtonActionPerformed

    private void deletRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletRoomButtonActionPerformed
        // TODO add your handling code here:
        contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Delete A Room");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel roomID = new JLabel("Enter RoomID");
       
       //add labels to labelPanel
       labelPanel.add(roomID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField roomIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(roomIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton deleteButt = new JButton("Delete Room");
       
       //create annonymous inner class to handle action events
       deleteButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                int recordId;
                
                //Input validation and conversion
                try
                {
                    recordId = Integer.parseInt(roomIDTextField.getText());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                //create delete query
                String query ="DELETE FROM Rooms WHERE Room_ID ="+recordId;
                String testQuery  ="SELECT * FROM Rooms WHERE Room_ID ="+ recordId;
                
                //create Runnable for executind delete query
                DeleteRecord delTask = new DeleteRecord(query,testQuery, contentPanel);
                delTask.execute();
                
                
            }//end of action performed method
        });//end of annonymous inner class
       JButton cancelButt = new JButton("Cancel");
        //add annonymous inner class to handle action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                roomIDTextField.setText(null);
            }
        });//end of annonymous inner class
       
       
       //add buttons to buttonPanel
       buttonPanel.add(deleteButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_deletRoomButtonActionPerformed

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed
        // TODO add your handling code here:
        contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Delete A User");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel username = new JLabel("Enter Username");
       
       //add labels to labelPanel
       labelPanel.add(username);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField usernameTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(usernameTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton deleteButt = new JButton("Delete User");
       
       //create annonymous inner class to handle action events
       deleteButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                String recordId;
                
                //Input validation and conversion
                try
                {
                    recordId = usernameTextField.getText();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                    //check for Blank strings
                    if(recordId.equals(""))
                    {
                       JOptionPane.showMessageDialog(contentPanel, "A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                       return;
                    }
                
                //create delete query
                String query ="DELETE FROM Users WHERE Username = '"+recordId+"'";
                String testQuery  ="SELECT * FROM Users WHERE Username = '"+ recordId+"'";
                
                //create Runnable for executind delete query
                DeleteRecord delTask = new DeleteRecord(query,testQuery, contentPanel);
                delTask.execute();
                
                
            }//end of action performed method
        });//end of annonymous inner class
       JButton cancelButt = new JButton("Cancel");
        //add annonymous inner class to handle action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                usernameTextField.setText(null);
            }
        });//end of annonymous inner class
       
       
       //add buttons to buttonPanel
       buttonPanel.add(deleteButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private void configureSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configureSettingsButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Configure A Plot's Settings");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(4, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel overdueDays = new JLabel("Set Max Rent Overdue Days");
       JLabel bonusDays = new JLabel("Bonus Days");
       JLabel plotNo = new JLabel("Plot No");
       JLabel settingsID = new JLabel("SettingsID");

       
       //add labels to labelPanel
       labelPanel.add(overdueDays);
       labelPanel.add(bonusDays);
       labelPanel.add(plotNo);
       labelPanel.add(settingsID);
       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField overdueDaysTextField = new JTextField();
       final JTextField bonusTextField = new JTextField();
       final JTextField plotNoTextField = new JTextField();
       final JTextField settingsIDTextField = new JTextField("AUTO_INCREMENT");
       settingsIDTextField.setEnabled(false);
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(4, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(overdueDaysTextField);
       fieldsPanel.add(bonusTextField);
       fieldsPanel.add(plotNoTextField);
       fieldsPanel.add(settingsIDTextField);
      
    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton configurePloButt = new JButton("Save Settings");
       
       //add action listener to handle action events
       configurePloButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                int overdueDays;
                int bonusDays;
                String plotNo;
                
                //Input validation and conversion
                try
                {
                    overdueDays = Integer.parseInt(overdueDaysTextField.getText());
                    bonusDays = Integer.parseInt(bonusTextField.getText());
                    plotNo = plotNoTextField.getText();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                //Check for Blank Strings
                if(plotNo.equals(""))
                {
                    JOptionPane.showMessageDialog(contentPanel,"A field cannot be Blank!","Invalid Data Entered!",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //Create configure settings runnable to run in swing worker thread
                ConfigurePlotSettings configtask = new ConfigurePlotSettings(overdueDays, bonusDays, plotNo, contentPanel);
                configtask.execute();
                
                //indicate that Access control might be added later
                //JOptionPane.showMessageDialog(null, "Autoback up feature might be added later hence need for AutoBack up days field!", "More Features", JOptionPane.INFORMATION_MESSAGE);
                                
                
            }//end of action performed method
        });//end of annonymous inner class
       
       
       JButton cancelButt = new JButton("Cancel");
        //add annonymous inner class to handle action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                overdueDaysTextField.setText(null);
                bonusTextField.setText(null);
                plotNoTextField.setText(null);
            }
        });//end of annonymous inner class
       
       
       //add buttons to buttonPanel
       buttonPanel.add(configurePloButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_configureSettingsButtonActionPerformed

    /*
     * View all settings
     */
    private void viewSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSettingsButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM Settings";
        String title = "All Settings";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
        
    }//GEN-LAST:event_viewSettingsButtonActionPerformed

    private void editTenantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTenantButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Edit Tenant Details");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel tenantID = new JLabel("Enter TenantID");
       
       //add labels to labelPanel
       labelPanel.add(tenantID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField tenantIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(tenantIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton editButt = new JButton("Edit Tenant Details");//Execute a query
       
       //anonymous inner class to handle editButt event
       editButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                int recordID = 0;
                try
                {
                    recordID = Integer.parseInt(tenantIDTextField.getText());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                    
                }
                
                String query = "SELECT * FROM Tenants WHERE Tenant_ID= "+recordID;
                
                EditTenantRecord editTask = new EditTenantRecord(query,recordID, contentPanel);
                editTask.execute();
                
            }//end of ActionPerformed Method
        });//end of Anonymous inner class
       JButton cancelButt = new JButton("Cancel");
       
       //add buttons to buttonPanel
       buttonPanel.add(editButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_editTenantButtonActionPerformed

    private void editLandLordDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLandLordDetailsButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Edit LandLord Details");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel landLordID = new JLabel("Enter LandLordID");
       
       //add labels to labelPanel
       labelPanel.add(landLordID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField landLordIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(landLordIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton editButt = new JButton("Edit LandLord Details");//Execute a query
       
       //Add anonymous inner class to handle ActionEvent
       editButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                int recordID = 0;
                try
                {
                    recordID = Integer.parseInt(landLordIDTextField.getText());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                    
                }
                
                String query = "SELECT * FROM LandLords WHERE LandLord_ID= "+recordID;
                
                EditLandLordRecord editTask = new EditLandLordRecord(query,recordID, contentPanel);
                editTask.execute();
                
              }//end of actionPerformed Method
        });//end of annonymous inner class
       
       JButton cancelButt = new JButton("Cancel");
       
       //add buttons to buttonPanel
       buttonPanel.add(editButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_editLandLordDetailsButtonActionPerformed

    private void editPlotDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlotDetailsButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Edit Plot Details");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel plotID = new JLabel("Enter plotID");
       
       //add labels to labelPanel
       labelPanel.add(plotID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField plotIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton editButt = new JButton("Edit Plot Details");//execute query
       
       //add annonymous inner class to handle ActionEvent
       editButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                String recordID = null;
                try
                {
                    recordID = plotIDTextField.getText();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                    
                }
                
                String query = "SELECT * FROM Plots WHERE Plot_No= '"+recordID +"'";
                
                EditPlotRecord editTask = new EditPlotRecord(query, contentPanel, recordID);
                editTask.execute();
                
                
            }//end of ActionPerformed
        });//end of annonymous inner class
       JButton cancelButt = new JButton("Cancel");
       
       //add buttons to buttonPanel
       buttonPanel.add(editButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_editPlotDetailsButtonActionPerformed

    private void editRoomDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoomDetailsButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Edit Room Details");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel roomID = new JLabel("Enter RoomID");
       
       //add labels to labelPanel
       labelPanel.add(roomID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField roomIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(roomIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton editButt = new JButton("Edit Room Room");//execute a query
       
       //add an annonymous inner class to handle ActionEvents
       editButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                String recordID = null;
                try
                {
                    recordID = roomIDTextField.getText();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                    
                }
                
                String query = "SELECT * FROM Rooms WHERE Room_No= '"+recordID +"'";
                
                EditRoomRecord editTask = new EditRoomRecord(query, contentPanel, recordID);
                editTask.execute();
                
            }//End of ActionPerformed Method
        });//End of annonymous inner class
       JButton cancelButt = new JButton("Cancel");
       
       //add buttons to buttonPanel
       buttonPanel.add(editButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_editRoomDetailsButtonActionPerformed

    private void editUserDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUserDetailsButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Edit User Details");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel username = new JLabel("Enter Username");
       
       //add labels to labelPanel
       labelPanel.add(username);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField usernameTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(usernameTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton editButt = new JButton("Edit User Details");
       
       //add annonymous inner class to handle ActionEvents
       editButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                String recordID = null;
                try
                {
                    recordID = usernameTextField.getText();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                    
                }
                
                String query = "SELECT * FROM Users WHERE Username= '"+recordID +"'";
                
                EditUserRecord editTask = new EditUserRecord(query, contentPanel, recordID);
                editTask.execute();
                
            }//End of ActionPerformed Method
        });//End of annonymous inner class
       JButton cancelButt = new JButton("Cancel");
       
       //add buttons to buttonPanel
       buttonPanel.add(editButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_editUserDetailsButtonActionPerformed

    private void editSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSettingsButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Edit A Plot's Setting");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel plotID = new JLabel("Enter plotID");
       
       //add labels to labelPanel
       labelPanel.add(plotID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField plotIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton editButt = new JButton("Edit Plot Settings");
       
       //create a annonymous inner class for handling Action Events
       editButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                String recordID = null;
                try
                {
                    recordID = plotIDTextField.getText();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                    
                }
                
                String query = "SELECT * FROM Settings WHERE Plot_No= '"+recordID +"'";
                
                EditSettingRecord editTask = new EditSettingRecord(query, contentPanel, recordID);
                editTask.execute();
                
            }//End of ActionPerformed Method
        });//End of annoymous inner class
       
       JButton cancelButt = new JButton("Cancel");
       
       //add buttons to buttonPanel
       buttonPanel.add(editButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_editSettingsButtonActionPerformed

    private void searchAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAllButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Search A Record");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel selectTable = new JLabel("Select Table to Search From");
       
       //add labels to labelPanel
       labelPanel.add(selectTable);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create tableList Array
       String tableListArr [] = {"Users","Tenants","LandLords","Plots","Bills","Settings","PayRent","PayRentAll","Rooms","Accounts","Expenses","Vacation_Notice"};
       final JComboBox selectTableCombo = new JComboBox(tableListArr);
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(selectTableCombo);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton nextButt = new JButton("Next");
       
       //add annonymous inner class to handle ActionEvents
       nextButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                contentPanel.removeAll(); 
                contentPanel.setLayout(new BorderLayout());
                contentPanel.setBorder(new DropShadowBorder());
       
                JPanel titlePanel = new JPanel(new FlowLayout());
                titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
                JLabel title = new JLabel("Search A Record");
                title.setFont(new java.awt.Font("DejaVu Sans", 1, 45));
       
       
                titlePanel.add(title);
       
                contentPanel.add(titlePanel,BorderLayout.NORTH);
       
                JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
                labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
                //create field name labels
                JLabel seachItem = new JLabel("Enter Search Item");
       
                //add labels to labelPanel
                labelPanel.add(seachItem);
     
                //add labelPanel to west side of contentPanel
                contentPanel.add(labelPanel,BorderLayout.WEST);
       
                //create Jseach bar
                final JXSearchField search = new JXSearchField();
       
                //create textfields panel
                JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
                fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
                //add searchfields to textfield panel
                fieldsPanel.add(search);    
       
                //add fieldsPanel to center region of contentPanel
                contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
                //create button panel 
                JPanel buttonPanel = new JPanel(new FlowLayout());
                buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
                JButton searchButt = new JButton("Search");
                       
                                
                //Create Annonymous inner class to handle search action events
                searchButt.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        //variable declaration
                        String searchString = null;
                        String table;
                        
                        //Input validation and conversion
                        try
                        {
                            searchString = search.getText();
                            table = (String)selectTableCombo.getSelectedItem();
                            
                        }catch(Exception e)
                        {
                            JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        
                        //create runnable to execute in Swing Worker Threads
                        SearchRecord searchTask = new SearchRecord(searchString, contentPanel, table);
                        searchTask.execute();
                        
                                                
                    }//end of actionPerformed Method
                });//end of annonymous inner class
                        
                        
                JButton cancelButt = new JButton("Cancel");
                
                //create annonymous inner class to handle cancel button action events
                cancelButt.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        
                        //reset search field
                        search.setText(null);
                    }
                });//end of annonymous inner class
                
                //add buttons to buttonPanel
                buttonPanel.add(searchButt);
                buttonPanel.add(cancelButt);
                
                //add buttonPanel to contentPanel
                contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
                contentPanel.revalidate();
                contentPanel.repaint();
                

            }//end of action performed  Method
        });//end of annoymous inner class
       JButton cancelButt = new JButton("Cancel");
       
       //add buttons to buttonPanel
       buttonPanel.add(nextButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_searchAllButtonActionPerformed

    private void deleteAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Delete A Record");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel selectTable = new JLabel("Select Table to Delete From");
       
       //add labels to labelPanel
       labelPanel.add(selectTable);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create tableList Array
       String tableListArr [] = {"Users","Tenants","LandLords","Plots","Bills","Settings","PayRent","Rooms","Accounts","Expenses","Vacation_Notice"};
       final JComboBox selectTableCombo = new JComboBox(tableListArr);
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(selectTableCombo);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton nextButt = new JButton("Next");
       
       //add annonymous inner class to handle ActionEvents
       nextButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                contentPanel.removeAll(); 
                contentPanel.setLayout(new BorderLayout());
                contentPanel.setBorder(new DropShadowBorder());
       
                JPanel titlePanel = new JPanel(new FlowLayout());
                titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
                JLabel title = new JLabel("Delete A Record");
                title.setFont(new java.awt.Font("DejaVu Sans", 1, 45));
       
       
                titlePanel.add(title);
       
                contentPanel.add(titlePanel,BorderLayout.NORTH);
       
                JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
                labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
                //create field name labels
                JLabel deleteItem = new JLabel("Enter Record ID");
       
                //add labels to labelPanel
                labelPanel.add(deleteItem);
     
                //add labelPanel to west side of contentPanel
                contentPanel.add(labelPanel,BorderLayout.WEST);
       
                //create a delete item JTextfield
                final JTextField deleteTextField = new JTextField();
                
       
                //create textfields panel
                JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
                fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
                //add searchfields to textfield panel
                fieldsPanel.add(deleteTextField);    
       
                //add fieldsPanel to center region of contentPanel
                contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
                //create button panel 
                JPanel buttonPanel = new JPanel(new FlowLayout());
                buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
                JButton deleteAllButt = new JButton("Delete Record");
                
                //create annonymous inner class to handle action events
                deleteAllButt.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent ae) {
                
                    //variable declaration
                    String recordId;
                    String query = null;
                    String testQuery = null;
                
                    //Input validation and conversion
                    try
                    {
                         recordId = deleteTextField.getText();
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                
                        //create delete query
                        if(((String)selectTableCombo.getSelectedItem()).equals("Tenants"))
                        {
                            //create delete query
                            query ="DELETE FROM Tenants WHERE Tenant_ID = '"+recordId+"'";
                            testQuery  ="SELECT * FROM Tenants WHERE Tenant_ID = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("Users"))
                        {
                            //create delete query
                            query ="DELETE FROM Users WHERE Username = '"+recordId+"'";
                            testQuery  ="SELECT * FROM Users WHERE Username = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("LandLords"))
                        {
                            //create delete query
                            query ="DELETE FROM LandLords WHERE LandLord_ID = '"+recordId+"'";
                            testQuery  ="SELECT * FROM LandLords WHERE LandLord_ID = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("Plots"))
                        {
                            //create delete query
                            query ="DELETE FROM Plots WHERE Plot_No = '"+recordId+"'";
                            testQuery  ="SELECT * FROM Plots WHERE Plot_No = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("Bills"))
                        {
                            //create delete query
                            query ="DELETE FROM Bills WHERE Bill_ID = '"+recordId+"'";
                            testQuery  ="SELECT * FROM Bills WHERE Bill_ID = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("Settings"))
                        {
                            //create delete query
                            query ="DELETE FROM Settings WHERE Settings_ID = '"+recordId+"'";
                            testQuery  ="SELECT * FROM Settings WHERE Settings_ID = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("PayRent"))
                        {
                            //create delete query
                            query ="DELETE FROM PayRent WHERE PayRent_ID = '"+recordId+"'";
                            testQuery  ="SELECT * FROM PayRent WHERE PayRent_ID = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("Rooms"))
                        {
                            //create delete query
                            query ="DELETE FROM Rooms WHERE Room_No = '"+recordId+"'";
                            testQuery  ="SELECT * FROM Rooms WHERE Room_No = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("Accounts"))
                        {
                            //create delete query
                            query ="DELETE FROM Accounts WHERE Account_ID ='"+recordId+"'";
                            testQuery  ="SELECT * FROM Accounts WHERE Account_ID = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("Expenses"))
                        {
                            //create delete query
                            query ="DELETE FROM Expenses WHERE Expense_ID = '"+recordId+"'";
                            testQuery  ="SELECT * FROM Expenses WHERE Expense_ID = '"+ recordId+"'";
                        }
                        else
                        if(((String)selectTableCombo.getSelectedItem()).equals("Vacation_Notice"))
                        {
                            //create delete query
                            query ="DELETE FROM Vacation_Notice WHERE Tenant_ID ='"+recordId+"'";
                            testQuery  ="SELECT * FROM Vacation_Notice WHERE Tenant_ID ='"+ recordId+"'";
                        }
                            
                
                        //create Runnable for executind delete query
                        DeleteRecord delTask = new DeleteRecord(query,testQuery, contentPanel);
                        delTask.execute();
                
                
                    }//end of action performed method
                });//end of annonymous inner class
                
                JButton cancelButt = new JButton("Cancel");
       
                //add buttons to buttonPanel
                buttonPanel.add(deleteAllButt);
                buttonPanel.add(cancelButt);
       
                //add buttonPanel to contentPanel
                contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
                contentPanel.revalidate();
                contentPanel.repaint();
                

            }//end of action performed  Method
        });//end of annoymous inner class
       JButton cancelButt = new JButton("Cancel");
       
       //add buttons to buttonPanel
       buttonPanel.add(nextButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_deleteAllButtonActionPerformed

    private void rentDueTenantsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentDueTenantsButtonActionPerformed
        // TODO add your handling code here:Hapa
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Plots RentDue Tenants");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel tenantID = new JLabel("Enter Plot No");
       
       
       //add labels to labelPanel
       labelPanel.add(tenantID);

     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create textfields
       final JTextField plotNoTextField = new JTextField();
       
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotNoTextField);
              
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton getDueRentButt = new JButton("Get Rent Due Tenants");
      
       //create annonymous inner class to handle get getDueRent action event
       getDueRentButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                String plotNo = null;
                try
                {
                    plotNo=plotNoTextField.getText();
                    
                }catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                   
                }
                
                //check if the the Strings are blank
                if(plotNo.equals(""))
                {
                    JOptionPane.showMessageDialog(contentPanel,"A Field cannot be Blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;   
                }
                
                //create runnable to execute in Swing Worker Thread
                ViewRentDueTenants rentDueTask = new ViewRentDueTenants(plotNo, contentPanel);
                rentDueTask.execute();
            }
        });//end of annonymous inner class
       
       
       JButton cancelButt = new JButton("Cancel");
       
       //create annonymous inner class to handle cancel action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                //reset plot number textfield
                plotNoTextField.setText(null);
            }
        });//end of annonymous inner class
       
       //add buttons to buttonPanel
       buttonPanel.add(getDueRentButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_rentDueTenantsButtonActionPerformed

    private void plotsExpensesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotsExpensesButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Get Plot's Expenses");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(3, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel plotID = new JLabel("Enter plot No");
       JLabel fronDate = new JLabel("Enter From Date");
       JLabel toDate = new JLabel("Enter To Date");
       
       //add labels to labelPanel
       labelPanel.add(plotID);
       labelPanel.add(fronDate);
       labelPanel.add(toDate);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create Jfields
       final JTextField plotIDTextField = new JTextField();
       final JXDatePicker fromDatePicker = new JXDatePicker();
       final JXDatePicker toDatePicker = new JXDatePicker();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(3, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotIDTextField); 
       fieldsPanel.add(fromDatePicker); 
       fieldsPanel.add(toDatePicker); 
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton totalExpensesButt = new JButton("Get Plot's Expenses");
       
       //add annonymous inner class to handle action events
       totalExpensesButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                //variables
                Date toDate;
                Date fromDate;
                String plotNo = null;
                
                //input validation and Conversion
                try 
                {
                    plotNo = plotIDTextField.getText();
                    fromDate = new Date(fromDatePicker.getDate().getTime());
                    toDate = new Date(toDatePicker.getDate().getTime());
                    
                }catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                //check if the passsed strings are blank
                if(plotNo.equals(""))
                {
                    JOptionPane.showMessageDialog(contentPanel,"A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;   
                }
                
                String query = "SELECT * FROM Expenses WHERE Date >=? AND Date <=? AND Plot_No = '"+plotNo+"'";
                String title = "All Plot's Expenses";
                
                //create runnables to execute in Swing Worker Thread
                ViewTableWithDate billsViewTask =  new ViewTableWithDate(query, contentPanel, title, fromDate, toDate);
                billsViewTask.execute();
                
                
            }//end of actionPerformed method
        });//end of annonymous inner class
       
       
       
       //add buttons to buttonPanel
       buttonPanel.add(totalExpensesButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_plotsExpensesButtonActionPerformed

    private void viewTenantsDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTenantsDetailsButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM Tenants";
        String title = "All Tenants";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
    }//GEN-LAST:event_viewTenantsDetailsButtonActionPerformed

    private void viewLandLordDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLandLordDetailsButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM LandLords";
        String title = "All LandLords";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
    }//GEN-LAST:event_viewLandLordDetailsButtonActionPerformed

    private void viewPlotDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPlotDetailButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM Plots";
        String title = "All Plots";
        
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
    }//GEN-LAST:event_viewPlotDetailButtonActionPerformed

    private void viewRoomDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRoomDetailsButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM Rooms";
        String title = "All Rooms";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
    }//GEN-LAST:event_viewRoomDetailsButtonActionPerformed

    private void viewUserDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewUserDetailsButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM Users";
        String title = "All Users";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
    }//GEN-LAST:event_viewUserDetailsButtonActionPerformed

    private void getAllVacantRoomsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllVacantRoomsButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM Rooms WHERE Room_Status = "+"'Vacant'";
        String title = "All Vacant Rooms";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
    }//GEN-LAST:event_getAllVacantRoomsButtonActionPerformed

    private void getAllBookedRoomsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllBookedRoomsButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM Rooms WHERE Room_Status = "+"'Booked'";
        String title = "All Booked Rooms";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel, title);
        viewTask.execute();
    }//GEN-LAST:event_getAllBookedRoomsButtonActionPerformed

    private void getAllOccupiedRoomsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllOccupiedRoomsButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM Rooms WHERE Room_Status = "+"'Occupied'";
        String title = "All Occupied Rooms";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
    }//GEN-LAST:event_getAllOccupiedRoomsButtonActionPerformed

    private void roomsToBeVacatedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomsToBeVacatedButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM Vacation_Notice ORDER BY Plot_No";//complicated
        String title = "All Rooms To Be Vacated Soon";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
    }//GEN-LAST:event_roomsToBeVacatedButtonActionPerformed

    private void vacateRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vacateRoomButtonActionPerformed
        // TODO add your handling code here:
        contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Vacate A Room");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel tenantID = new JLabel("Enter Tenant ID");
       
       
       //add labels to labelPanel
       labelPanel.add(tenantID);

     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create textfields
       final JTextField tenantIDTextField = new JTextField();
       
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(tenantIDTextField);
              
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton vacateRoomButt = new JButton("Vacate Room");
      
       //create annonymous inner class to handle get getDueRent action event
       vacateRoomButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                int tenantID;
                try
                {
                   tenantID = Integer.parseInt(tenantIDTextField.getText());
                    
                }catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                   
                }
                
                //create runnable to execute in Swing Worker Thread
                VacateARoom vacateTask = new VacateARoom(tenantID, contentPanel);
                vacateTask.execute();
            }
        });//end of annonymous inner class
       
       
       JButton cancelButt = new JButton("Cancel");
       
       //create annonymous inner class to handle cancel action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                //reset plot number textfield
                tenantIDTextField.setText(null);
            }
        });//end of annonymous inner class
       
       //add buttons to buttonPanel
       buttonPanel.add(vacateRoomButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_vacateRoomButtonActionPerformed

    private void tenantsReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tenantsReportButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT Tenants.First_Name,Tenants.Last_Name,Tenants.Plot_No,Tenants.Room_No,Plots.Plot_Name FROM Tenants INNER JOIN Plots ON Tenants.Plot_No = Plots.Plot_No";
        String title = "Tenants Sumary Report";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel, title);
        viewTask.execute();
    }//GEN-LAST:event_tenantsReportButtonActionPerformed

    private void overdueRentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overdueRentButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Plots Rent Overdue Tenants");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel tenantID = new JLabel("Enter Plot No");
       
       
       //add labels to labelPanel
       labelPanel.add(tenantID);

     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create textfields
       final JTextField plotNoTextField = new JTextField();
       
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotNoTextField);
              
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton getDueRentButt = new JButton("Get Rent OverDue Tenants");
      
       //create annonymous inner class to handle get getDueRent action event
       getDueRentButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                String plotNo = null;
                try
                {
                    plotNo=plotNoTextField.getText();
                    
                }catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                   
                }
                
                //check if the passsed strings are blank
                if(plotNo.equals(""))
                {
                    JOptionPane.showMessageDialog(contentPanel,"A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;   
                }
                
                //create runnable to execute in Swing Worker Thread
                ViewRentOverdueTenants rentDueTask = new ViewRentOverdueTenants(plotNo, contentPanel);
                rentDueTask.execute();
            }
        });//end of annonymous inner class
       
       
       JButton cancelButt = new JButton("Cancel");
       
       //create annonymous inner class to handle cancel action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                //reset plot number textfield
                plotNoTextField.setText(null);
            }
        });//end of annonymous inner class
       
       //add buttons to buttonPanel
       buttonPanel.add(getDueRentButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_overdueRentButtonActionPerformed

    private void getAllBillsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllBillsButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Get All Bills");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(2, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel fronDate = new JLabel("Enter From Date");
       JLabel toDate = new JLabel("Enter To Date");
       
       //add labels to labelPanel
       labelPanel.add(fronDate);
       labelPanel.add(toDate);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create Jfields
       final JXDatePicker fromDatePicker = new JXDatePicker();
       final JXDatePicker toDatePicker = new JXDatePicker();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(2, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(fromDatePicker); 
       fieldsPanel.add(toDatePicker); 
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton allBillsButt = new JButton("Get All Bills");
       
       //create annonymous inner class to handle action events
       allBillsButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                Date fromDate = null;
                Date toDate = null;
                
                //input data validation and conversion
                try
                {
                    fromDate = new Date(fromDatePicker.getDate().getTime());
                    toDate = new Date(toDatePicker.getDate().getTime());
                    
                }catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                String query  = "SELECT * FROM Bills WHERE Date >=? AND Date <=? AND Bill_Payment_Status = 'Not_Payed'";
                String title = "All Bills";
                
                ViewTableWithDate billsViewTask =  new ViewTableWithDate(query, contentPanel, title, fromDate, toDate);
                billsViewTask.execute();
                
            }//end of ActionPerformed method
        });//end of annoymous inner class
       
       //add buttons to buttonPanel
       buttonPanel.add(allBillsButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_getAllBillsButtonActionPerformed

    private void removeVacationNoticeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeVacationNoticeButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Remove Vacation Notice");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel tenantID = new JLabel("Enter TenantID ");
       
       //add labels to labelPanel
       labelPanel.add(tenantID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField tenantIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(tenantIDTextField);    
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton removeVacationNoticeButt = new JButton("Remove Vacation Notice");
       
       //create annonymous inner class to handle action events
       removeVacationNoticeButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                int recordId;
                
                //Input validation and conversion
                try
                {
                    recordId = Integer.parseInt(tenantIDTextField.getText());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                //create delete query
                String query ="DELETE FROM Vacation_Notice WHERE Tenant_ID ="+recordId;
                String testQuery  ="SELECT * FROM Vacation_Notice WHERE Tenant_ID ="+ recordId;
                
                //create Runnable for executind delete query
                DeleteRecord delTask = new DeleteRecord(query,testQuery, contentPanel);
                delTask.execute();
                
                
            }//end of action performed method
        });//end of annonymous inner class
       
       
       JButton cancelButt = new JButton("Cancel");
        //add annonymous inner class to handle action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                tenantIDTextField.setText(null);
            }
        });//end of annonymous inner class
       
       
       //add buttons to buttonPanel
       buttonPanel.add(removeVacationNoticeButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_removeVacationNoticeButtonActionPerformed

    private void profitLossButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profitLossButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Plot's Profit Loss Report");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(3, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel plotID = new JLabel("Enter plot No");
       JLabel fronDate = new JLabel("Enter From Date");
       JLabel toDate = new JLabel("Enter To Date");
       
       //add labels to labelPanel
       labelPanel.add(plotID);
       labelPanel.add(fronDate);
       labelPanel.add(toDate);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create Jfields
       final JTextField plotIDTextField = new JTextField();
       final JXDatePicker fromDatePicker = new JXDatePicker();
       final JXDatePicker toDatePicker = new JXDatePicker();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(3, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotIDTextField); 
       fieldsPanel.add(fromDatePicker); 
       fieldsPanel.add(toDatePicker); 
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton getProfitLossReportButt = new JButton("Get Plot's Expenses");
       
       //add annonymous inner class to handle action events
       getProfitLossReportButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                //variables
                Date toDate;
                Date fromDate;
                String plotNo = null;
                
                //input validation and Conversion
                try 
                {
                    plotNo = plotIDTextField.getText();
                    fromDate = new Date(fromDatePicker.getDate().getTime());
                    toDate = new Date(toDatePicker.getDate().getTime());
                    
                }catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //check if the passsed strings are blank
                if(plotNo.equals(""))
                {
                    JOptionPane.showMessageDialog(contentPanel,"A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;   
                }
               
                //create runnables to execute in Swing Worker Thread
                ProfitLossReport plTask = new ProfitLossReport(plotNo, toDate, fromDate, contentPanel);
                plTask.execute();
                
                
                
            }//end of actionPerformed method
        });//end of annonymous inner class
       
       
       //add buttons to buttonPanel
       buttonPanel.add(getProfitLossReportButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_profitLossButtonActionPerformed

    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
        this.setVisible(false);
        LoginForm.getLoginFormInstance().setVisible(true);
    }//GEN-LAST:event_logoutMenuItemActionPerformed

    private void viewRentPayementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRentPayementButtonActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM PayRentAll";
        String title = "View All Rent Payed";
        
        //create runnable to execute in Swing Worker Thread
        ViewTable viewTask = new ViewTable(query, contentPanel,title);
        viewTask.execute();
    }//GEN-LAST:event_viewRentPayementButtonActionPerformed

    private void payBillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payBillButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Pay Bill");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 36));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel billID = new JLabel("Enter Bill ID");
       
       //add labels to labelPanel
       labelPanel.add(billID);
     
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create Jfields
       final JTextField billIDTextField = new JTextField();
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(1, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(billIDTextField); 

       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton payBillButt = new JButton("Pay Bill");
       
       //create annonymous inner class to handle action events
       payBillButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                int billId;
                
                //input data validation and conversion
                try
                {
                    billId = Integer.parseInt(billIDTextField.getText());
                    
                }catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
               //create runnable to execute in Swing Worker Thread
                PayBill payBillTask = new PayBill(billId, contentPanel);
                payBillTask.execute();
                
                
            }//end of ActionPerformed method
        });//end of annoymous inner class
       
       JButton cancelButt = new JButton("Cancel");
       
       //create annonymous inner class to handle action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                //reset billID 
                billIDTextField.setText(null);
            }//end of action performed class
        });//end of annonymous inner class
       
       
       //add buttons to buttonPanel
       buttonPanel.add(payBillButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);
       
       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_payBillButtonActionPerformed

    private void addAPlotExpenseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAPlotExpenseButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setLayout(new BorderLayout());
       contentPanel.setBorder(new DropShadowBorder());
       
       JPanel titlePanel = new JPanel(new FlowLayout());
       titlePanel.setBackground(new java.awt.Color(144, 89, 33));
       
       JLabel title = new JLabel("Add A Plot Expense");
       title.setFont(new java.awt.Font("DejaVu Sans", 1, 25));
       
       
       titlePanel.add(title);
       
       contentPanel.add(titlePanel,BorderLayout.NORTH);
       
       JPanel labelPanel = new JPanel(new GridLayout(5, 1, 5, 5));
       labelPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //create field name labels
       JLabel plotNo = new JLabel("Plot No");
       JLabel amount = new JLabel("Amount(KES)");
       JLabel expenseDes = new JLabel("Expense Description");
       JLabel date = new JLabel("Date");
       JLabel expenseID = new JLabel("ExpenseID");
       
       
       //add labels to labelPanel
       labelPanel.add(plotNo);
       labelPanel.add(amount);
       labelPanel.add(expenseDes);
       labelPanel.add(date);
       labelPanel.add(expenseID);
       
       //add labelPanel to west side of contentPanel
       contentPanel.add(labelPanel,BorderLayout.WEST);
       
       //create JTextfields
       final JTextField plotNoTextField = new JTextField();
       final JTextField amountTextField = new JTextField();
       final JTextField expenseDesTextField = new JTextField();
       final JXDatePicker dateJXDatePicker = new JXDatePicker(Locale.UK);
       final JTextField expenseIdTextField = new JTextField("AUTO_INCREMENT");
       expenseIdTextField.setEnabled(false);
       
       //create textfields panel
       JPanel fieldsPanel = new JPanel(new GridLayout(5, 1, 5, 5));
       fieldsPanel.setBackground(new java.awt.Color(144, 89, 33));
       
       //add textfields to textfield panel
       fieldsPanel.add(plotNoTextField);
       fieldsPanel.add(amountTextField);
       fieldsPanel.add(expenseDesTextField);
       fieldsPanel.add(dateJXDatePicker);
       fieldsPanel.add(expenseIdTextField);
       
       //add fieldsPanel to center region of contentPanel
       contentPanel.add(fieldsPanel,BorderLayout.CENTER);
       
       //create button panel 
       JPanel buttonPanel = new JPanel(new FlowLayout());
       buttonPanel.setBackground(new java.awt.Color(144, 89, 33));
       JButton createPlotButt = new JButton("Add Plot Expense");
       
       //create annonymous inner class to handle action events
       createPlotButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                
                //variable declaration
                String plotNo;
                double amount;
                String expenseDes = null;
                Date myDate;                
                
                //Input validation code and conversion
                try
                {
                   plotNo = plotNoTextField.getText();
                   amount = Double.parseDouble(amountTextField.getText());
                   expenseDes = expenseDesTextField.getText();
                   myDate = new Date(dateJXDatePicker.getDate().getTime());
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(contentPanel, e, "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;                    
                }
                
                //check if the passsed strings are blank
                if(plotNo.equals("") || expenseDes.equals(""))
                {
                    JOptionPane.showMessageDialog(contentPanel,"A Field cannot be blank!", "Invalid Data Entered!", JOptionPane.ERROR_MESSAGE);
                    return;   
                }
                
                //create CreateNewPlot Runnable
               AddPlotExpense expenseTask = new AddPlotExpense(plotNo, amount, expenseDes, myDate, contentPanel);
               expenseTask.execute();
               
                   
                   
            }//end of Action Event method
        });//end of annonymous inner class
               
               
       JButton cancelButt = new JButton("Cancel");
     
       //add annonymous inner class to handle cancel butt action events
       cancelButt.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                plotNoTextField.setText(null);
                amountTextField.setText(null);
                expenseDesTextField.setText(null);
            }
        });//end of annonymous inner class
       
       //add buttons to buttonPanel
       buttonPanel.add(createPlotButt);
       buttonPanel.add(cancelButt);
       
       //add buttonPanel to contentPanel
       contentPanel.add(buttonPanel, BorderLayout.SOUTH);

       contentPanel.revalidate();
       contentPanel.repaint();
    }//GEN-LAST:event_addAPlotExpenseButtonActionPerformed

    private void shutdownMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownMenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(1);
    }//GEN-LAST:event_shutdownMenuItemActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        // TODO add your handling code here:
       contentPanel.removeAll(); 
       contentPanel.setBorder(null);

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(welcomeLabel)
            .addComponent(contLabel)
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(welcomeLabel)
                .addGap(98, 98, 98)
                .addComponent(contLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(149, Short.MAX_VALUE))
        );
        
       contentPanel.revalidate();
       contentPanel.repaint();
        
    }//GEN-LAST:event_homeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainApp().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountManagementLabel;
    private javax.swing.JPanel actionPanel;
    private javax.swing.JScrollPane actionScrollPane;
    private javax.swing.JButton addAPlotExpenseButton;
    private javax.swing.JButton billATenantButton;
    private javax.swing.JButton configureSettingsButton;
    private javax.swing.JLabel contLabel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JLabel copyRightLabel;
    private javax.swing.JButton createNewLandLordButton;
    private javax.swing.JButton createNewRoomButton;
    private javax.swing.JButton createNewTenantButton;
    private javax.swing.JButton createNewUserButton;
    private javax.swing.JButton cretaNewPlotButton;
    private javax.swing.JButton deletRoomButton;
    private javax.swing.JButton deleteAllButton;
    private javax.swing.JButton deleteLandLordButton;
    private javax.swing.JButton deletePlotButton;
    private javax.swing.JButton deleteTenantButton;
    private javax.swing.JButton deleteUserButton;
    private javax.swing.JButton editLandLordDetailsButton;
    private javax.swing.JButton editPlotDetailsButton;
    private javax.swing.JButton editRoomDetailsButton;
    private javax.swing.JButton editSettingsButton;
    private javax.swing.JButton editTenantButton;
    private javax.swing.JButton editUserDetailsButton;
    private javax.swing.JLabel genManagementLabel;
    private javax.swing.JButton getAllBillsButton;
    private javax.swing.JButton getplotsExpensesButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JButton issueVacationNoticeButton;
    private javax.swing.JLabel landLordActionLabel;
    private javax.swing.JButton landLordReportButton;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JLabel mainIconLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel managementPanel;
    private javax.swing.JScrollPane managementScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton overdueRentButton;
    private javax.swing.JButton payRentButton;
    private javax.swing.JButton paylBillButton;
    private javax.swing.JLabel plotActionLabel;
    private javax.swing.JButton plotsReportButton;
    private javax.swing.JButton profitLossButton;
    private javax.swing.JMenu quitMenu;
    private javax.swing.JButton removeVacationNoticeButton;
    private javax.swing.JLabel roomActionLabel;
    private javax.swing.JButton roomReportButton;
    private javax.swing.JButton searchAllButton;
    private javax.swing.JLabel settingsButton;
    private javax.swing.JMenuItem shutdownMenuItem;
    private javax.swing.JTabbedPane sidePaneTabbedPane;
    private javax.swing.JLabel tenantManagementLabel;
    private javax.swing.JLabel tenantsActionLabel;
    private javax.swing.JButton tenantsReportButton;
    private javax.swing.JButton tenantsTotalRentButton;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JLabel userActionsLabel;
    private javax.swing.JButton userReportButton;
    private javax.swing.JButton vacateRoomButton;
    private javax.swing.JButton viewLandLordDetailsButton;
    private javax.swing.JButton viewPlotDetailButton;
    private javax.swing.JButton viewRentPayementButton;
    private javax.swing.JButton viewRoomDetailsButton;
    private javax.swing.JButton viewSettingsButton;
    private javax.swing.JButton viewTenantsDetailsButton;
    private javax.swing.JButton viewUserDetailsButton;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
